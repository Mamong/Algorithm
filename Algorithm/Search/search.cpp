//
//  search.cpp
//  Algorithm
//
//  Created by marco on 2019/2/11.
//  Copyright © 2019 flywire. All rights reserved.
//

#include "search.hpp"

/*
 
 搜索算法根据存储结构可分为：
 1.线性结构：顺序查找、折半查找、分块查找
 2.树形结构：二叉排序树、二叉平衡树、B树、B+树
 3.散列结构：散列表
 
 效率指标：平均查找长度
 
 分块查找：将查找表分为若干个子块，块内元素可以无序，但块之间是有序的，即第一个块中的最大关键字小于第二块中的所有记录的关键字，依次类推。再建立一个索引表，索引表中的每个元素含有各块的最大关键字和块中第一个元素的地址，索引表按关键字有序排列。
 
 散列函数的构造方法：
 1.直接定址法：关键字的某个线性函数值
 2.除留余数法
 3.数字分析法
 4.平方取中法：关键字平方值的中间几位
 5.折叠法：关键字分割成位数相同的几部分，取它们的叠加和
 
 散列函数冲突解决
 1.开放定址法：Hi=(H(K)+di)%m
    线性探测法：di=0,1,....查看下一个，下下一个。。。直到整个表
    平方探测法：di=0,1,-1,4,-4,9,-9...查看
    再散列法: Hi=(H(K)+i*H2(K))%m，i是第几次冲突，H2是另一个哈希函数
    伪随机法：di为伪随机序列
 2.拉链法
 */

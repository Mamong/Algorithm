//
//  stl.cpp
//  Algorithm
//
//  Created by marco on 2019/7/22.
//  Copyright © 2019 flywire. All rights reserved.
//

#include "stl.hpp"

/*
 
 STL(标准模板库)，是目前C++内置支持的library。它的底层利用了C++类模板和函数模板的机制，由三大部分组成：容器、算法和迭代器。
 目前STL有六大组件
 
 容器 container
 算法 algorthm
 迭代器 iterator
     c++迭代器（iterator）详解https://blog.csdn.net/lisayh/article/details/87278777
     根据STL中的分类，iterator包括：
     Input Iterator：只能单步向前迭代元素，不允许修改由该类迭代器引用的元素。
     Output Iterator：该类迭代器和Input Iterator极其相似，也只能单步向前迭代元素，不同的是该类迭代器对元素只有写的权力。
     Forward Iterator：该类迭代器可以在一个正确的区间中进行读写操作，它拥有Input Iterator的所有特性，和Output Iterator的部分特性，以及单步向前迭代元素的能力。
     Bidirectional Iterator：该类迭代器是在Forward Iterator的基础上提供了单步向后迭代元素的能力。
     Random Access Iterator：该类迭代器能完成上面所有迭代器的工作，它自己独有的特性就是可以像指针那样进行算术计算，而不是仅仅只有单步向前或向后迭代。

 仿函数 function object
 适配器 adaptor
 空间配置器 allocator
 

 STL初探
 容器是STL中很重要的一种数据结构。常见的容器包括
 
 vector容器
 deque双端数组
 stack栈模型
 queue队列模型
 list链表模型
 priotriy_queue优先级队列
 set与multiset容器，红黑树实现
 map与multimap容器，红黑树实现的字典，
 unordered_map容器，哈希表实现的字典，查询效率高
 
 除了容器，STL还封装了强大的算法，能够实现查找、删除、替换等很多常见操作。后面会重点讲解。
 另外，迭代器也是STL重要的一环，通过迭代器，我们可以很方便对容器中的元素进行遍历，以及操作容器。后面我们会穿插讲解迭代器。
 
 
 作者：starrring
 链接：https://www.nowcoder.com/discuss/183113?order=1&pos=9&type=0
 来源：牛客网
 
 1）vector: 内部实现是数组，一段连续的内存。
 
 2）list， 内部实现是双链表
 
 3）deque 内部实现是内存块的链表。
 
 4）string： 连续的内存
 
 5）set，map： 红黑树(平衡二叉树的一种)
 
 6）hash_map, hash_set 用哈希表(散列表)来实现。
 
 7）stack: 用vector或者是deque来实现
 
 8）queue,用deque实现
 
 http://c.biancheng.net/stl/number/
 
 
 STL之序列容器
 序列容器以线性序列的方式存储元素。它没有对元素进行排序，元素的顺序和存储它们的顺序相同。本章将介绍 5 种标准的序列容器，每种容器都具有不同的特性：

 array<T,N> (数组容器) ：是一个长度固定的序列，有 N 个 T 类型的对象，不能增加或删除元素。
 vector<T> (向量容器) ：是一个长度可变的序列，用来存放T类型的对象。必要时，可以自动增加容量，但只能在序列的末尾高效地增加或删除元素。
 deque<T> (双向队列容器) ：是一个长度可变的、可以自动增长的序列，在序列的两端都不能高效地增加或删除元素。
 list<T> (链表容器) 是一个长度可变的、由 T 类型对象组成的序列，它以双向链表的形式组织元素，在这个序列的任何地方都可以高效地增加或删除元素。访问容器中任意元素的速度要比前三种容器慢，这是因为 list<T> 必须从第一个元素或最后一个元素开始访问，需要沿着链表移动，直到到达想要的元素。
 forward list<T> (正向链表容器) ：是一个长度可变的、由 T 类型对象组成的序列，它以单链表的形式组织元素，是一类比链表容器快、更节省内存的容器，但是它内部的元素只能从第一个元素开始访问。

 
C++ array(STL array)的用法及初始化
 array<T,N> 模板定义了一种相当于标准数组的容器类型。它是一个有 N 个 T 类型元素的固定序列。除了需要指定元素的类型和个数之外，它和常规数组没有太大的差别。显然，不能增加或删除元素。

 模板实例的元素被内部存储在标准数组中。和标准数组相比，array 容器的额外幵销很小，但提供了两个优点：如果使用 at()，当用一个非法的索引访问数组元素时，能够被检测到，因为容器知道它有多少个元素，这也就意味着数组容器可以作为参数传给函数，而不再需要单独去指定数组元素的个数。

 使用 array 容器类型时，需要在源文件中包含头文件 array。数组容器非常好用，这里有一个示例，展示了如何创建具有 100 个 double 型元素的 array<>:

     std::array<double,100> data;

 如果定义了一个 array 容器，却没有为元素指定初始值，那么元素就不会被初始化；但是可以如下所示，将它们初始化为 0 或者和默认元素类型等效的值：

     std::array<double, 100> data {};

 使用该语句初始化后，容器中所有的元素都会变为 0.0。形参 N 必须是一个常量表达式(constant expression)并且容器中元素的个数不能变。当然，当创建 array 容器的实例时，要像创建常规数组那样，对元素进行初始化：

     std::array<double, 10> values {0.5, 1.0, 1.5, 2.0};


 初始化器列表中的 4 个值用于初始化前 4 个元素，其余的元素都将为 0
 通过调用数组对象的成员函数 fill()，可以将所有元素设成给定值。例如：

     values.fill(3.1415926);

 fill() 函数将所有元素都设为传入的实参值。
 
 
 C++ array获取（访问）元素
  可以通过在方括号中使用索引表达式汸问和使用数组容器的元素，这和标准数组的访问方式相同，例如：

     values[4] = values[3] + 2.O*values[1];

 第 5 个元素的值被赋值为右边表达式的值。像这样使用索引时，因为没有做任何边界检査，所以，如果使用越界的索引值去访问或存储元素，就不会被检测到。为了能够检查越界索引值，应该使用成员函数 at():

     values.at (4) = values.at(3) + 2.O*values.at(1);

 这和前一条语句的功能相同，除了当传给 at() 的索引是一个越界值时，这时会抛出 std::out_of_rang 异常。应该总是使用 at()，除非确定索引没有越界。这也产生了一个疑问，为什么 operator[]() 的实现没有进行边界检查？答案是因为性能。如果每次访问元素，都去检查索引值，无疑会产生很多开销。当不存在越界访问的可能时，就能避免这种开销。
 
 数组对象的 size() 函数能够返回 size_t 类型的元素个数值.
 不需要去调用 size() 函数来判断一个数组容器是否为空。如果容器中没有元素的话，成员函数 empty() 会返回 true.
  对于任何可以使用迭代器的容器，都可以使用基于范围的循环，因此能够更加简便地计算容器中所有元素的和：
 double total {};
 for(auto&& value : values)
     total += value;
 
 数组容器的成员函数 front() 和 back() 分别返回第一个元素和最后一个元素的引用。成员函数 data() 同样能够返回 &from()，它是容器底层用来存储元素的标准数组的地址，一般不会用到。
 
 模板函数 get<n>() 是一个辅助函数，它能够获取到容器的第 n 个元素。模板参数的实参必须是一个在编译时可以确定的常量表达式，所以它不能是一个循环变量。它只能访问模板参数指定的元素，编译时会对它进行检查。get<n>() 模板提供了一种不需要在运行时检查，但能用安全的索引值访问元素的方式。下面展示如何使用它：

 std::array<std::string, 5> words {"one","two","three”,"four","five" };
 std::cout << std::get<3>(words) << std::endl; // Output words[3]
 std::cout << std::get<6>(words) << std::endl; // Compiler error message!
 */
